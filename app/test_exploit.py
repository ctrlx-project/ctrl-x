"""Tests the parse_scan module."""

import json
import os
import pytest

import exploit

directory = os.path.dirname(__file__)
PARSED_SCAN_PATH = os.path.join(directory, "seed/scan_parser/10.10.0.14.json")
EXPLOIT_PATH = os.path.join(directory, "seed/exploit/10.10.0.14.json")

with open(PARSED_SCAN_PATH, encoding="UTF-8") as json_parsed:
    PARSED_SCAN = json.load(json_parsed)
with open(EXPLOIT_PATH, encoding="UTF-8") as json_exploit:
    EXPLOIT = json.load(json_exploit)

def test_fill_option():
    #Tests fill_option method.
    server_ip = "10.10.0.13"
    password = "password"
    port = 24
    custom_manager = "fake_manager"
    manager = exploit.ExploitManager(server_ip, password, port, custom_manager)
    target_ip = next(iter(EXPLOIT))
    target_port = 21
    filled_option = manager.fill_option("CHOST", target_ip, target_port)
    expected_result = EXPLOIT[target_ip][str(target_port)]["vsftpd 2.3.4"]["exploit_options"]["CHOST"]
    assert filled_option == expected_result

@pytest.mark.unit
def test_analyze_scan(server_ip, password, port):
    # when running pytest, use format pytest --server_ip (server_ip) --password (password) --port (port)
    manager = exploit.ExploitManager(server_ip, password, port)
    manager.load_scan(PARSED_SCAN)
    modules = manager.analyze_scan()
    assert "10.10.0.14" in modules.keys()